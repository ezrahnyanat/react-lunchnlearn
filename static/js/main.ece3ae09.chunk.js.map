{"version":3,"sources":["components/Item.js","components/Order.js","App.js","serviceWorker.js","index.js"],"names":["Item","react_default","a","createElement","this","props","food","Component","defaultProps","Order","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","time","ago","_this2","setState","Date","interval","setInterval","now","getTime","Math","floor","console","log","clearInterval","_this$props","name","drink","onDelete","_this$state","style","backgroundColor","toLocaleTimeString","components_Item","onClick","App","handleChange","e","defineProperty","target","value","handleSubmit","preventDefault","orders","push","nameInput","current","focus","handleDelete","newOrderList","filter","order","React","createRef","className","onSubmit","htmlFor","ref","type","onChange","map","components_Order","assign","key","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ece3ae09.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nclass Item extends Component {\n  render() {\n    return (\n      <p>{this.props.food}</p>\n    )\n  }\n}\n\nItem.propTypes = {\n  food: PropTypes.string\n}\n\nItem.defaultProps = {\n  food: 'burrito bowl'\n}\n\nexport default Item","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport Item from './Item'\n\nclass Order extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      time: '',\n      ago: 0\n    }\n  }\n\n  componentWillMount() {\n    this.setState({\n      time: new Date()\n    })\n    this.interval = setInterval( () => {\n      let now = new Date().getTime()\n      let ago = this.state.time.getTime()\n      this.setState({\n        ago: Math.floor((now - ago) / 1000)\n      }) \n    }, 1000)\n    console.log('component mounted')\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n    console.log('component unmounted')\n  }\n\n  render() {\n    const {name, drink, food, onDelete} = this.props\n    const { time, ago } = this.state\n    return (\n      <div style={{backgroundColor: ago <= 10 ? 'lightGreen' : 'red'}}>\n        <p>Ordered at {time.toLocaleTimeString()} {ago} seconds ago </p>\n        <p>{name}: {drink}</p>\n        <Item food={food}/>\n        <button onClick={onDelete}>Done</button>\n        <hr />\n      </div>\n    )\n  }\n}\n\nOrder.propTypes = {\n  name: PropTypes.string,\n  drink: PropTypes.string\n}\n\nOrder.defaultProps = {\n  name: 'Craig',\n  drink: 'water',\n}\n\nexport default Order\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Order from './components/Order'\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      name:'',\n      drink:'',\n      food:'',\n      orders: []\n    }\n    this.nameInput = React.createRef()\n  }\n\n    handleChange = (e) => {\n      this.setState({\n        [e.target.name]: e.target.value,\n      })\n    }\n\n    handleSubmit = (e) => {\n      e.preventDefault()\n      const {name, drink, food, orders} = this.state\n      orders.push({name, drink, food}) \n      this.setState({\n        orders,       \n        name:'',\n        drink:'',\n        food:'',\n      })\n      this.nameInput.current.focus()\n    }\n\n    handleDelete = (name) => {\n      const {orders} = this.state\n      let newOrderList = orders.filter(order => order.name !== name)\n      this.setState({\n        orders: newOrderList\n      })\n    } \n\n  render() {\n    // const Order = (props) => {\n    //   return (\n    //     <>\n    //       <p>{props.name}: {props.drink}</p>\n    //     </>\n    //   )\n    // \n\n    const {orders} = this.state\n\n    return (\n      <div className=\"App\">\n        <h1>Hello Central Cafe</h1>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor='name'>Name: <input ref={this.nameInput} type='text' name='name' value={this.state.name} onChange={this.handleChange}/></label>\n          <label htmlFor='drink'>Drink: <input type='text' name='drink' value={this.state.drink} onChange={this.handleChange}/></label>\n          <label htmlFor='food'>Food: <input type='text' name='food' value={this.state.food} onChange={this.handleChange}/></label>\n          <input type='submit' value='Submit' />\n        </form>\n          <hr />\n          {orders.map(order => (<Order {...order} key={order.name} onDelete={this.handleDelete.bind(this, order.name)} />) )}\n          {/* <Order name={name} drink={drink} food={food} time={time.toLocaleTimeString()}/>\n          <Order name='Ezrah' drink='drip' food='taco' />\n          <Order name='Michael' drink='latte' food='pastry' />\n          <Order name='Allen' drink='mocha' food='banana'/> */}\n       </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}